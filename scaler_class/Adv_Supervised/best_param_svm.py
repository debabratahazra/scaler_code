#import SVM classifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

def tune_params(X,y, kernel_list, c_list): 
    #X and y are the attributes and the response variable
    X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=0, test_size=0.25)
    
    #Write the code to find the best pair of C and kernel
    
    
    # kernel_list represents your input list of kernels
    # c_list represents your input list of values of C's
    
    best_kernel = None
    best_C = None
    
    #YOUR CODE GOES HERE
    max_acc = 0.0
    for kernel in kernel_list:
     for C in c_list:
         model = SVC(kernel=kernel, C=C).fit(X_train, y_train)
         model_pred = model.predict(X_test)
         acc = accuracy_score(y_test,model_pred)
         if acc > max_acc:
           max_acc = acc
           best_kernel, best_C = kernel, C
    
    
    #YOUR CODE ENDS HERE
    
    return best_kernel, best_C

X = [[ 4.21850347 , 2.23419161],
 [ 0.90779887 , 0.45984362],
 [-0.27652528,  5.08127768],
 [ 0.08848433 , 2.32299086],
 [ 3.24329731  ,1.21460627],
 [ 1.44193252,  2.76754364],
 [ 1.0220286  , 4.11660348],
 [ 3.97820955  ,2.37817845],
 [ 0.58894326,  4.00148458],
 [ 1.25185786 , 0.20811388],
 [ 0.62835793  ,4.4601363 ],
 [ 1.68608568,  0.65828448],
 [ 1.18454506 , 5.28042636],
 [ 0.06897171  ,4.35573272],
 [ 1.78726415,  1.70012006],
 [ 4.4384123  , 1.84214315],
 [ 3.18190344 ,-0.18226785],
 [ 0.30380963,  3.94423417],
 [ 0.73936011 , 0.43607906],
 [ 1.28535145  ,1.43691285],
 [ 1.1312175,   4.68194985],
 [ 0.66471755,  4.35995267],
 [ 1.31570453 , 2.44067826],
 [-0.18887976  ,5.20461381],
 [ 2.57854418,  0.72611733],
 [ 0.87305123 , 4.71438583],
 [ 1.3105127   ,0.07122512],
 [ 0.9867701,   6.08965782],
 [ 1.42013331,  4.63746165],
 [ 2.3535057  , 2.22404956],
 [ 2.43169305 ,-0.20173713],
 [ 1.0427873,   4.60625923],
 [ 0.95088418,  0.94982874],
 [ 2.45127423 ,-0.19539785],
 [ 1.62011397  ,2.74692739],
 [ 2.15504965,  4.12386249],
 [ 1.38093486 , 0.92949422],
 [ 4.21850347 , 2.23419161],
 [ 0.90779887 , 0.45984362],
 [-0.27652528,  5.08127768],
 [ 0.08848433 , 2.32299086],
 [ 3.24329731  ,1.21460627],
 [ 1.44193252,  2.76754364],
 [ 1.0220286  , 4.11660348],
 [ 3.97820955  ,2.37817845],
 [ 0.58894326,  4.00148458],
 [ 1.25185786 , 0.20811388],
 [ 0.62835793  ,4.4601363 ],
 [ 1.68608568,  0.65828448],
 [ 1.18454506 , 5.28042636],
 [ 0.06897171  ,4.35573272],
 [ 1.78726415,  1.70012006],
 [ 4.4384123  , 1.84214315],
 [ 3.18190344 ,-0.18226785],
 [ 0.30380963,  3.94423417],
 [ 0.73936011 , 0.43607906],
 [ 1.28535145  ,1.43691285],
 [ 1.1312175,   4.68194985],
 [ 0.66471755,  4.35995267],
 [ 1.31570453 , 2.44067826],
 [-0.18887976  ,5.20461381],
 [ 2.57854418,  0.72611733],
 [ 0.87305123 , 4.71438583],
 [ 1.3105127   ,0.07122512],
 [ 0.9867701,   6.08965782],
 [ 1.42013331,  4.63746165],
 [ 2.3535057  , 2.22404956],
 [ 2.43169305 ,-0.20173713],
 [ 1.0427873,   4.60625923],
 [ 0.95088418,  0.94982874],
 [ 2.45127423 ,-0.19539785],
 [ 1.62011397  ,2.74692739],
 [ 2.15504965,  4.12386249],
 [ 1.38093486 , 0.92949422],
 [ 4.21850347 , 2.23419161],
 [ 0.90779887 , 0.45984362],
 [-0.27652528,  5.08127768],
 [ 0.08848433 , 2.32299086],
 [ 3.24329731  ,1.21460627],
 [ 1.44193252,  2.76754364],
 [ 1.0220286  , 4.11660348],
 [ 3.97820955  ,2.37817845],
 [ 0.58894326,  4.00148458],
 [ 1.25185786 , 0.20811388],
 [ 0.62835793  ,4.4601363 ],
 [ 1.68608568,  0.65828448],
 [ 1.18454506 , 5.28042636],
 [ 0.06897171  ,4.35573272],
 [ 1.78726415,  1.70012006],
 [ 4.4384123  , 1.84214315],
 [ 3.18190344 ,-0.18226785],
 [ 0.30380963,  3.94423417],
 [ 0.73936011 , 0.43607906],
 [ 1.28535145  ,1.43691285],
 [ 1.1312175,   4.68194985],
 [ 0.66471755,  4.35995267],
 [ 1.31570453 , 2.44067826],
 [-0.18887976  ,5.20461381],
 [ 2.57854418,  0.72611733],
 [ 0.87305123 , 4.71438583]]

y = [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,
     0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 
     0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 
     0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1]

kernel = ["rbf", "sigmoid"]  
C = [1000, 1]
print("Best Kernel and C value", tune_params(X, y, kernel, C))